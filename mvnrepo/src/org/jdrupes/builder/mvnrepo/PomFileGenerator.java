/*
 * JDrupes Builder
 * Copyright (C) 2025 Michael N. Lipp
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package org.jdrupes.builder.mvnrepo;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.EnumSet;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.jdrupes.builder.api.BuildException;
import org.jdrupes.builder.api.Generator;
import static org.jdrupes.builder.api.Intend.Supply;
import org.jdrupes.builder.api.Project;
import static org.jdrupes.builder.api.Project.Properties.*;
import org.jdrupes.builder.api.Resource;
import org.jdrupes.builder.api.ResourceRequest;
import static org.jdrupes.builder.api.ResourceType.*;
import org.jdrupes.builder.core.AbstractGenerator;
import static org.jdrupes.builder.mvnrepo.MvnProperties.*;
import static org.jdrupes.builder.mvnrepo.MvnRepoTypes.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/// A [Generator] for POM files.
///
/// The generator provides a single type of resource.
/// 
///
@SuppressWarnings("PMD.TooManyStaticImports")
public class PomFileGenerator extends AbstractGenerator {

    /// The Constant GENERATED_BY.
    public static final String GENERATED_BY = "Generated by JDrupes Builder";
    private static DocumentBuilderFactory dbf
        = DocumentBuilderFactory.newInstance();
    private Path destination = Path.of("maven");

    /// Instantiates a new library generator.
    ///
    /// @param project the project
    ///
    public PomFileGenerator(Project project) {
        super(project);
    }

    /// Returns the destination directory. Defaults to "`maven`".
    ///
    /// @return the destination
    ///
    public Path destination() {
        return destination;
    }

    /// Sets the destination directory. The [Path] is resolved against
    /// the project's build directory (see [Project#buildDirectory]).
    ///
    /// @param destination the new destination
    /// @return the java compiler
    ///
    public PomFileGenerator destination(Path destination) {
        this.destination = destination;
        return this;
    }

    @Override
    public <T extends Resource> Stream<T>
            provide(ResourceRequest<T> requested) {
        var pomPath = project().buildDirectory().resolve(destination)
            .resolve("pom.xml");

        // Maybe only delete
        if (requested.includes(Cleaniness)) {
            if (pomPath.toFile().exists()) {
                pomPath.toFile().delete();
            }
            return Stream.empty();
        }

        if (!requested.includes(PomFileType)) {
            return Stream.empty();
        }

        var deps = project().newResource(MvnRepoDependenciesType).addAll(
            project().provided(new ResourceRequest<>(
                MvnRepoDependenciesType).forwardTo(EnumSet.of(Supply))));
        pomPath.getParent().toFile().mkdirs();
        generateXmlFile(this::generatePomFile, pomPath);
        @SuppressWarnings("unchecked")
        var result = (Stream<T>) Stream
            .of(project().newResource(PomFileType, pomPath));
        return result;
    }

    private void generatePomFile(Document doc) {
        var project = (Element) doc.appendChild(doc
            .createElementNS("http://maven.apache.org/POM/4.0.0", "project"));
        project.setAttributeNS("http://www.w3.org/2000/xmlns/",
            "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        project.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance",
            "xsi:schemaLocation", "http://maven.apache.org/POM/4.0.0"
                + " https://maven.apache.org/xsd/maven-4.0.0.xsd");
        project.appendChild(doc.createElement("modelVersion"))
            .setTextContent("4.0.0");
        var groupId = project().<String> get(GroupId);
        if (groupId == null) {
            throw new BuildException("Project " + project() + " must have"
                + " property Group set for POM generation.");
        }
        project.appendChild(doc.createElement("groupId"))
            .setTextContent(project().get(GroupId));
        project.appendChild(doc.createElement("artifactId"))
            .setTextContent(Optional.ofNullable(project()
                .<String> get(ArtifactId)).orElse(project().name()));
        project.appendChild(doc.createElement("version"))
            .setTextContent(project().get(Version));
        project.appendChild(doc.createElement("name"))
            .setTextContent(project().name());

        // Allow adaption
        adaptPom(doc, project);
    }

    /// Allow derived classes to post process the generated POM.
    ///
    /// @param doc the doc
    /// @param project the project (root element)
    ///
    protected void adaptPom(Document doc, Element project) {
        // Do nothing
    }

    private void generateXmlFile(Consumer<Document> generator, Path filePath) {
        try {
            var doc = dbf.newDocumentBuilder().newDocument();
            generator.accept(doc);
            var transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(
                "{http://xml.apache.org/xslt}indent-amount", "2");
            try (var out = Files.newBufferedWriter(filePath)) {
                transformer.transform(new DOMSource(doc),
                    new StreamResult(out));
            }
        } catch (ParserConfigurationException | TransformerException
                | TransformerFactoryConfigurationError | IOException e) {
            throw new BuildException(e);
        }
    }

}
